#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2025 Ilya Egorov <0x42005e1f@gmail.com>
# SPDX-License-Identifier: ISC

import sys

from collections.abc import Generator
from typing import Any, Final, Literal, Protocol, final

if sys.version_info >= (3, 11):
    from typing import Self
else:
    from typing_extensions import Self

class Event(Protocol):
    def __bool__(self, /) -> bool: ...
    def set(self, /) -> bool: ...
    def cancel(self, /) -> bool: ...
    def is_set(self, /) -> bool: ...
    def is_cancelled(self, /) -> bool: ...

@final
class DummyEvent(Event):
    def __new__(cls, /) -> DummyEvent: ...
    def __bool__(self, /) -> Literal[True]: ...
    def __await__(self, /) -> Generator[Any, Any, Literal[True]]: ...
    def wait(self, /, timeout: float | None = None) -> Literal[True]: ...
    def set(self, /) -> Literal[False]: ...
    def cancel(self, /) -> Literal[False]: ...
    def is_set(self, /) -> Literal[True]: ...
    def is_cancelled(self, /) -> Literal[False]: ...

DUMMY_EVENT: Final[DummyEvent]

class GreenEvent(Event):
    def __new__(cls, /) -> Self: ...
    def wait(self, /, timeout: float | None = None) -> bool: ...

class AsyncEvent(Event):
    def __new__(cls, /) -> Self: ...
    def __await__(self, /) -> Generator[Any, Any, bool]: ...
